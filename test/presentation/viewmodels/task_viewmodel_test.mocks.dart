// Mocks generated by Mockito 5.4.5 from annotations
// in tidytask/test/presentation/viewmodels/task_viewmodel_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:tidytask/core/services/notification_service.dart' as _i5;
import 'package:tidytask/data/repositories/task_repository_impl.dart' as _i2;
import 'package:tidytask/domain/entities/task.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [TaskRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRepositoryImpl extends _i1.Mock
    implements _i2.TaskRepositoryImpl {
  MockTaskRepositoryImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Task>> getAllTasks() =>
      (super.noSuchMethod(
            Invocation.method(#getAllTasks, []),
            returnValue: _i3.Future<List<_i4.Task>>.value(<_i4.Task>[]),
          )
          as _i3.Future<List<_i4.Task>>);

  @override
  _i3.Future<_i4.Task?> getTaskById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getTaskById, [id]),
            returnValue: _i3.Future<_i4.Task?>.value(),
          )
          as _i3.Future<_i4.Task?>);

  @override
  _i3.Future<void> createTask(_i4.Task? task) =>
      (super.noSuchMethod(
            Invocation.method(#createTask, [task]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> updateTask(_i4.Task? task) =>
      (super.noSuchMethod(
            Invocation.method(#updateTask, [task]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deleteTask(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteTask, [id]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<List<_i4.Task>> getTasksByPriority(_i4.TaskPriority? priority) =>
      (super.noSuchMethod(
            Invocation.method(#getTasksByPriority, [priority]),
            returnValue: _i3.Future<List<_i4.Task>>.value(<_i4.Task>[]),
          )
          as _i3.Future<List<_i4.Task>>);

  @override
  _i3.Future<List<_i4.Task>> getTasksByDeadline(DateTime? deadline) =>
      (super.noSuchMethod(
            Invocation.method(#getTasksByDeadline, [deadline]),
            returnValue: _i3.Future<List<_i4.Task>>.value(<_i4.Task>[]),
          )
          as _i3.Future<List<_i4.Task>>);

  @override
  _i3.Future<List<_i4.Task>> searchTasks(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#searchTasks, [query]),
            returnValue: _i3.Future<List<_i4.Task>>.value(<_i4.Task>[]),
          )
          as _i3.Future<List<_i4.Task>>);
}

/// A class which mocks [NotificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationService extends _i1.Mock
    implements _i5.NotificationService {
  MockNotificationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> scheduleTaskReminder(_i4.Task? task) =>
      (super.noSuchMethod(
            Invocation.method(#scheduleTaskReminder, [task]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> cancelTaskReminder(_i4.Task? task) =>
      (super.noSuchMethod(
            Invocation.method(#cancelTaskReminder, [task]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}
